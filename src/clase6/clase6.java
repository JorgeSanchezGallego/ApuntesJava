package clase6;

import java.util.Scanner;

public class clase6 {
    public static void main(String[] args) {
        //üìù ENUNCIADOS
/*üü® Ejercicio 1 ‚Äì Salir de un bucle while con break
                Haz un programa que pida al usuario n√∫meros enteros positivos. El programa debe
        terminar cuando el usuario introduzca el n√∫mero 0. Usa un bucle while con break.*/
        Scanner teclado = new Scanner(System.in);
        int numero;
        while (true){
            System.out.println("Introduce un numero y pon 0 para salir");
            numero = teclado.nextInt();
            if (numero == 0) {
                //Si es 0 salgo del bucle
                break;
            }
            System.out.println("Has introducido: " +numero);
        }
        System.out.println("Programa finalizado");


/*üü® Ejercicio 2 ‚Äì Saltarse los m√∫ltiplos de 3 con continue
                Escribe un programa que muestre los n√∫meros del 1 al 10,
            excepto los m√∫ltiplos de 3. Usa un bucle for con continue.*/
        //Recorrer ese intervalo de numeros
        for (int i = 1; i<=10; i++){
            if (i%3 == 0){
                //Si es multiplo de 3, saltam√©
                continue;
            }
            System.out.println(i);
        }


/*üü® Ejercicio 3 ‚Äì Finalizar un bucle for al encontrar un n√∫mero concreto
        Haz un programa que busque el n√∫mero 7 entre los n√∫meros del 1 al 20. Cuando
        lo encuentre, debe mostrar un mensaje y terminar el bucle con break.*/
    for (int e=1; e<=20;e++){
        if (e==7){
            System.out.println("Has encontrado el numero 7");
            break;
        }
        System.out.println("Probando que se ve con: " +e);
    }


/*üü® Ejercicio 4 ‚Äì Evitar mostrar letras vocales con continue
                Muestra las letras de la palabra "PROGRAMACION", pero omite las vocales usando continue.*/
    String palabra = "programacion";
    for (int b = 0; b<palabra.length();b++){
        char letra = palabra.charAt(b);
        if (letra =='a' || letra =='e' || letra== 'o' || letra == 'u' || letra == 'i'){
            continue;
        }
        System.out.println(letra);
    }


/*üü® Ejercicio 5 ‚Äì Dividir dos n√∫meros con try-catch
        Haz un programa que divida dos n√∫meros enteros introducidos por el usuario.
        Usa try-catch para evitar que el programa se rompa si el divisor es 0.*/


/*üü® Ejercicio 6 ‚Äì Acceder a una posici√≥n no v√°lida de una cadena (charAt) con control de excepci√≥n
        Solicita una palabra al usuario y pide una posici√≥n. Intenta mostrar el car√°cter en
        esa posici√≥n usando try-catch. Si se produce un error, muestra un mensaje.*/


/*üü® Ejercicio 7 ‚Äì Mensaje de fin con finally
        Haz un programa que intente dividir dos n√∫meros. Usa try-catch-finally
        para mostrar siempre un mensaje final que diga "Operaci√≥n terminada".*/



/*üü® Ejercicio 8 ‚Äì Leer n√∫meros y sumar los positivos, ignorando los negativos con continue
                Pide al usuario 5 n√∫meros enteros. Suma solo los positivos usando continue para ignorar los negativos.*/



/*üü® Ejercicio 9 ‚Äì Detectar si se ha introducido texto en lugar de n√∫mero (try-catch)
        Pide al usuario que introduzca un n√∫mero. Si escribe una palabra u otro texto,
                el programa debe capturar la excepci√≥n y mostrar "Eso no es un n√∫mero".*/



/*üü® Ejercicio 10 ‚Äì Salir de un bucle do-while cuando se adivina un n√∫mero secreto
        Crea un n√∫mero secreto entre 1 y 10. El usuario tiene que adivinarlo.
                Usa do-while y break para salir cuando acierte.*/


    }
}
